<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/algorithm/</link>
        <description>Algorithm - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sat, 26 Apr 2025 17:23:49 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>Kosaraju&#39;s Algorithm Explained</title>
    <link>https://martinlwx.github.io/en/kosaraju-algorithm-explained/</link>
    <pubDate>Sat, 26 Apr 2025 17:23:49 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/kosaraju-algorithm-explained/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>During my daily coding practice, I encountered an interesting problem - <a href="https://cses.fi/problemset/task/1682/" target="_blank" rel="noopener noreferrer">1682. Flight Routes Check</a>. Solving this problem requires finding all strongly connected components (SCCs) in a directed graph. After some research, I discovered Kosaraju&rsquo;s algorithm, which solves this problem <em>in linear time</em>. That is, the time complexity is</p>
<p>$$
O(V+E)
$$</p>
<p>Where $V$ refers to the nodes and $E$ refers to the edges in the graph.</p>]]></description>
</item><item>
    <title>The next lexicographical permutation problem</title>
    <link>https://martinlwx.github.io/en/the-next-lexicographical-permutation-problem/</link>
    <pubDate>Wed, 06 Sep 2023 23:13:52 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/the-next-lexicographical-permutation-problem/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Occasionally, you may want to <strong>get the next/prev lexicographical permutation of a sequence</strong>. How would you do that? If you are a C++ programmer, you are probably familiar with the <code>next_permutation</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and <code>prev_permutation</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> APIs. However, Python does not provide the counterparts. So the topic today is how to do this in Python. Since the solutions of prev lexicographical permutation and the next lexicographical permutation are very similar, let us focus on the next lexicographical permutation problem.</p>]]></description>
</item><item>
    <title>Solving DP problems by SRTBOT Framework</title>
    <link>https://martinlwx.github.io/en/solving-dynamic-programming-problems-using-srtbot/</link>
    <pubDate>Sun, 09 Apr 2023 12:30:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/solving-dynamic-programming-problems-using-srtbot/</guid>
    <description><![CDATA[<p><strong>Changelog</strong>:</p>
<ul>
<li><a href="#relate-subproblems" rel="">Update dependency graphs</a> @2023.04.13</li>
</ul>
<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>When solving algorithm problems, what often gives me a headache are dynamic programming problems(DP problems). They are the type of problems that I can&rsquo;t figure out on my own after thinking for a long time, but after seeing the answer, it suddenly becomes clear and reasonable. However, the next time I encounter a similar problem, I may forget how to solve it. I have also read many people&rsquo;s solutions and tried to digest and apply their ideas, but <strong>I have been unable to find a particularly good framework that works for all dynamic programming problems</strong>. It seems that everyone has their way of solving dynamic programming problems, and when I try to apply their methods to new problems, I always encounter difficulties. <strong>Things start to change after I learned <a href="https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/" target="_blank" rel="noopener noreferrer">MIT6.006</a></strong>. The teacher presented 6 steps to solve dynamic programming problems, which is called the SRTBOT framework. I found it to be <strong>so useful and practical</strong> that I decided to write this blog post to share it with everyone ðŸ™Œ</p>]]></description>
</item><item>
    <title>Boyer-Moore Majority Voting Algorithm Explained</title>
    <link>https://martinlwx.github.io/en/boyer-moore-majority-voting-algorithm-explained/</link>
    <pubDate>Thu, 24 Mar 2022 18:15:19 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/boyer-moore-majority-voting-algorithm-explained/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><hr>
<p>Today I coded the <a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener noreferrer">Leetcode 169. Majority Element</a> again. I vaguely remember what the optimal solution is called Boyer-Moore Majority Voting Algorithm. However, I have no idea what is except for its name. So I plan to systematically learn the principle of this algorithm and summarize it to write this blog. I once heard that:</p>
<blockquote>
  <p>If you want to master something, teach it :)</p>

</blockquote><p>So, I&rsquo;m here today to share this algorithm with you, and try to teach you this method in plain language, so let&rsquo;s get started :)</p>]]></description>
</item></channel>
</rss>
