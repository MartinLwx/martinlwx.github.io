<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Programming-Languages - Category - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/categories/programming-languages/</link>
        <description>Programming-Languages - Category - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sun, 01 Jun 2025 22:50:47 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/categories/programming-languages/" rel="self" type="application/rss+xml" /><item>
    <title>Programming with Categories: Functor</title>
    <link>https://martinlwx.github.io/en/why-functor/</link>
    <pubDate>Sun, 01 Jun 2025 22:50:47 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/why-functor/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>What&rsquo;s a functor? You might use it daily without realizing it. For example, calling <code>map</code> on a collection means you&rsquo;re using a functor.</p>
<p>This post explains functors from two perspectives: category theory and programming. By this end, you will have a deeper understanding of the concept.</p>
<h2 id="functor-in-category-theory" class="headerLink">
    <a href="#functor-in-category-theory" class="header-mark"></a>Functor in category theory</h2><div class="details admonition warning open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/></svg></span>Warning<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p>This section assumes you know what a category is. If you haven&rsquo;t heard of it before, think of a category as a collection of objects and the relationships between them.</p>]]></description>
</item><item>
    <title>Two different APIs related to Process Pool in Python</title>
    <link>https://martinlwx.github.io/en/data-parallel-with-two-different-api/</link>
    <pubDate>Sun, 30 Mar 2025 21:36:18 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/data-parallel-with-two-different-api/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>As a machine learning engineer, I work with vast amounts of data, performing tasks such as data cleaning and information extraction. These tasks are typically data-parallel and do not involve race conditions. Such workloads are usually referred to as CPU-intensive tasks. Typically, these tasks can be formulated as <code>map(fn, data)</code>.</p>
<p>Python is limited by its Global Interpreter Lock (GIL). As a result, using multithreading could not improve the performance. Instead, multiprocessing should be used. Usually, you would not manually manage all the launched processes but would instead use a process pool. Today, I&rsquo;d like to discuss two different APIs related to multiprocessing: <code>multiprocessing.Pool</code> and <code>concurrent.futures.ProcessPoolExecutor</code>, and provide a simple comparison.</p>]]></description>
</item><item>
    <title>What is the Python decorator really?</title>
    <link>https://martinlwx.github.io/en/understanding-python-decorator/</link>
    <pubDate>Mon, 20 Jan 2025 21:40:43 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/understanding-python-decorator/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>If you could understand this statement: <em>Python function is a first-class function</em>, then I believe you should have no problem understanding the Python decorator too. This statement means that the function is also a value, just like any other primitive types (<code>int, str, float, etc</code>), and <em>can be passed as arguments to function or returned as function outputs</em>.</p>
<p>You may heard of the technical term - <em>high-order function</em>, which means that its arguments contain a function or (and) it returns a function. So we know that the Python decorator is a kind of high-order function.</p>]]></description>
</item><item>
    <title>What is Phantom type in OCaml</title>
    <link>https://martinlwx.github.io/en/what-is-phantom-type-in-ocaml/</link>
    <pubDate>Sun, 08 Dec 2024 16:33:18 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/what-is-phantom-type-in-ocaml/</guid>
    <description><![CDATA[<h2 id="syntax" class="headerLink">
    <a href="#syntax" class="header-mark"></a>Syntax</h2><div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>Info<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p>The left side of <code>=</code> represents type, while the right side represents the value.</p>]]></description>
</item><item>
    <title>Use Polymorphic Variant Type in Ocaml</title>
    <link>https://martinlwx.github.io/en/use-polymorphic-variant-type-in-ocaml/</link>
    <pubDate>Sun, 24 Nov 2024 20:00:58 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/use-polymorphic-variant-type-in-ocaml/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>I have been learning and using OCaml for a while. However, I&rsquo;m still quite confused about the Polymorphic variant feature. Recently, while exploring the <a href="https://github.com/ocaml-community/yojson" target="_blank" rel="noopener noreferrer">Yojson</a> library, I came across this feature again. After some research, I couldnâ€™t find any comprehensive articles about polymorphic variants (the <a href="https://ocaml.org/manual/5.1/polyvariant.html" target="_blank" rel="noopener noreferrer">official introduction</a> is not easy to grasp this feature IMHO), only a few related answers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. So I decided to write an article, hoping it will be helpful to you :)</p>]]></description>
</item><item>
    <title>Why Applicative Functor</title>
    <link>https://martinlwx.github.io/en/why-applicative-functor/</link>
    <pubDate>Sun, 20 Oct 2024 00:14:08 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/why-applicative-functor/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>Info<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p>I assume you&rsquo;re already familiar with functors. If not, please refer to my <a href="https://martinlwx.github.io/en/why-functor/" rel="">previous post</a></p>]]></description>
</item><item>
    <title>Learn to Use @dataclass in Python</title>
    <link>https://martinlwx.github.io/en/learn-to-use-dataclass-in-python/</link>
    <pubDate>Sat, 17 Aug 2024 14:22:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/learn-to-use-dataclass-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>I like Python&rsquo;s tuple, which allows us to quickly <em>bundle</em> together values of <em>different types</em> as a single entity and manage them in an intuitive and easy-to-use way. However, I find that once the tuple has <em>many fields</em>, I&rsquo;m <em>forced to</em> add a comment to indicate the meaning of each field. For example,</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    
    tw-flex 
    tw-flex-row
    tw-flex-1 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        code-block-button
        tw-mx-2 
        tw-flex
        tw-flex-row
        tw-flex-1"
      aria-hidden="true">
          <div class="group-[.is-open]:tw-rotate-90 tw-transition-[transform] tw-duration-500 tw-ease-in-out print:!tw-hidden tw-w-min tw-h-min tw-my-1 tw-mx-1"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></div>
          <p class="tw-select-none !tw-my-1">python</p>]]></description>
</item><item>
    <title>Tail call and Tail-call Optimization (TCO)</title>
    <link>https://martinlwx.github.io/en/tail-call-and-tail-call-optimization/</link>
    <pubDate>Fri, 22 Mar 2024 12:13:53 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/tail-call-and-tail-call-optimization/</guid>
    <description><![CDATA[<h2 id="tail-call--tail-recursion" class="headerLink">
    <a href="#tail-call--tail-recursion" class="header-mark"></a>Tail call &amp; Tail-recursion</h2><p>Assume that function <code>A</code> calls function <code>B</code>. We call function <code>A</code> <em>Caller</em> and function <code>B</code> <em>Callee</em>.</p>
<p>The tail call refers to when the Caller <em>only needs to</em> wait for the return value of the Callee, as <em>everything else</em> has already been completed<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>If this is a recursive function call(e.g. the Caller and Callee are the same function), then the function is said to be tail-recursive.</p>
<h3 id="tail-call-optimization-tco" class="headerLink">
    <a href="#tail-call-optimization-tco" class="header-mark"></a>Tail-call Optimization (TCO)</h3><p>According to the mechanism of the function call, a stack frame will be created to store some useful information such as the return address. What if the function call is a tail-call? Could you find any optimization chance?</p>]]></description>
</item><item>
    <title>Type hints: what and why</title>
    <link>https://martinlwx.github.io/en/type-hints-in-python/</link>
    <pubDate>Fri, 13 Jan 2023 16:18:02 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/type-hints-in-python/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>Info<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p><strong>Updates</strong>ï¼š</p>]]></description>
</item><item>
    <title>Unpacking in Python 3.5</title>
    <link>https://martinlwx.github.io/en/unpacking-in-python/</link>
    <pubDate>Mon, 05 Dec 2022 23:16:30 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/unpacking-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>Today I want to talk about the unpacking operators(<code>*</code> and <code>**</code>) in python.</p>
<h2 id="basic-usage" class="headerLink">
    <a href="#basic-usage" class="header-mark"></a>Basic usage</h2><p>We use <code>*</code> for numeric data types to indicate we want to do multiplication. However, we can also apply <code>*</code> to <strong>iterable objects</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which means we want to unpack all the elements inside them.</p>
<blockquote>
  <p>ðŸ“’The built-in iterable objects: <code>list</code>, <code>tuple</code>, <code>set</code>, and <code>dict</code></p>
</blockquote><h3 id="starred-assignmentexpression" class="headerLink">
    <a href="#starred-assignmentexpression" class="header-mark"></a>Starred assignment/expression</h3><p>In the release of python 3.0, it is shipped with powerful iterable unpacking operations<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, which is called the starred assignment/expression(or parallel assignment).</p>]]></description>
</item></channel>
</rss>
