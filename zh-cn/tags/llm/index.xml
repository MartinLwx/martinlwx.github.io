<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>LLM - 标签 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/tags/llm/</link>
        <description>LLM - 标签 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sun, 02 Mar 2025 10:50:00 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/tags/llm/" rel="self" type="application/rss+xml" /><item>
    <title>如何理解 Transformer 的自注意力公式</title>
    <link>https://martinlwx.github.io/zh-cn/an-explanation-of-self-attention/</link>
    <pubDate>Sun, 02 Mar 2025 10:50:00 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/an-explanation-of-self-attention/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>大模型基于 Transformer 架构搭建而成，而自注意力机制是 Transformer 的<em>核心</em>。要理解大模型就要从理解自注意力开始。在本篇文章里，我将拆解自注意力公式来帮助你理解，最后还会手撕自注意力的 PyTorch 代码 :0</p>]]></description>
</item><item>
    <title>GraphRAG 工作流</title>
    <link>https://martinlwx.github.io/zh-cn/the-flow-of-graphrag/</link>
    <pubDate>Tue, 11 Feb 2025 23:40:59 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/the-flow-of-graphrag/</guid>
    <description><![CDATA[<h2 id="motivation" class="headerLink">
    <a href="#motivation" class="header-mark" aria-label="Header mark for 'Motivation'"></a>Motivation</h2><p>当前的 RAG 技术无法回答<em>关于语料库的全局性问题</em>，比如“这个数据集的主题是什么”。这一类问题不是可以通过检索增强技术解决的，因为答案一般不在某一段文本里面，正确答案需要<em>理解整个语料库并给出抽象的总结</em>，作者称这类问题为 query-focused summarization (QFS) 问题<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。普通的 RAG 技术无法很好处理这个问题。</p>]]></description>
</item><item>
    <title>论文阅读: Generalization through Memorization: Nearest Neighbor Language Models</title>
    <link>https://martinlwx.github.io/zh-cn/what-is-knn-lm/</link>
    <pubDate>Mon, 23 Dec 2024 22:01:35 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/what-is-knn-lm/</guid>
    <description><![CDATA[<h2 id="motivation" class="headerLink">
    <a href="#motivation" class="header-mark" aria-label="Header mark for 'Motivation'"></a>Motivation</h2><p>语言模型解决 2 种问题</p>
<ol>
<li>用一个特征向量表示句子前缀</li>
<li>使用该特征向量预测下一个 token</li>
</ol>
<p>本文提出的 $k\texttt{NN-LM}$ 基于这么一个假设：<em>学习特征向量表示比预测下一个 token</em>，因此本文的方法主要基于该假设进行设计</p>]]></description>
</item><item>
    <title>论文阅读: In-Context Retrieval-Augmented Language Models</title>
    <link>https://martinlwx.github.io/zh-cn/in-context-ralm-paper-reading/</link>
    <pubDate>Wed, 04 Dec 2024 00:53:25 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/in-context-ralm-paper-reading/</guid>
    <description><![CDATA[<h2 id="the-idea" class="headerLink">
    <a href="#the-idea" class="header-mark" aria-label="Header mark for 'The idea'"></a>The idea</h2><p>In-Context RALM<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 是用于 Autoregressive LM 上的 RAG 技术。RAG 说白了就是在模型推理的时候有个 Retriever 检索相关的文档，检索到的文档会和本来的输入拼接在一起</p>
<p>在 In-Context Learning 里面，会把一些例子放在用户输入的<em>前面</em>，再给 LLM。因此不难想象 In-Context RALM <em>也类似</em>：In-Context RALM 就是将检索到的<em>最相关</em>的文档直接拼在模型输入的<em>前面</em>，优势是<em>不需要再训练 LLM</em>，我用 mermaid 画了一个图，如下所示</p>]]></description>
</item><item>
    <title>LLM 推理加速 - KV Cache</title>
    <link>https://martinlwx.github.io/zh-cn/llm-inference-optimization-kv-cache/</link>
    <pubDate>Thu, 12 Oct 2023 16:38:18 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/llm-inference-optimization-kv-cache/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark" aria-label="Header mark for '背景'"></a>背景</h2><p>LLM 用于推理的时候就是不断基于前面的所有 token 生成下一个 token</p>
<p>假设现在已经生成了 $t$ 个 token，用 $x_{1:t}$ 表示。在下一轮，LLM 会生成 $x_{1:t+1}$，注意他们的前 $t$ 个 token 是<em>一样的</em></p>]]></description>
</item><item>
    <title>BPE 分词解密 - 实现方法与示例讲解</title>
    <link>https://martinlwx.github.io/zh-cn/the-bpe-tokenizer/</link>
    <pubDate>Thu, 24 Aug 2023 22:06:37 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/the-bpe-tokenizer/</guid>
    <description><![CDATA[<h2 id="bpe-简介" class="headerLink">
    <a href="#bpe-%e7%ae%80%e4%bb%8b" class="header-mark" aria-label="Header mark for 'BPE 简介'"></a>BPE 简介</h2><p>在 NLP 里面，一个核心的问题是，如何对文本进行分词？从分类的角度上面来说，可以分为：</p>
<ul>
<li>Char level</li>
<li>Word level</li>
<li>Subword level</li>
</ul>
<p>先看 Char level 分词，顾名思义，就是把文本拆分成一个个字符单独表示，<em>比如 <code>highest -&gt; h, i, g, h, e, s, t</code></em>，一个显然的好处是，Vocab 不会太大，Vocab 的大小为字符集的大小，也不会遇到 Out-of-vocabulary(OOV) 的问题，但是<strong>字符本身并没有传达太多的语义</strong>，而且<strong>分词之后会有太多的 token</strong>，<em>光是一个 highest 就可以得到 7 个 token，难以想象很长的文本分出来会有多少个</em>😨</p>]]></description>
</item></channel>
</rss>
