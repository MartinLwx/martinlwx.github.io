<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Git - 标签 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/tags/git/</link>
        <description>Git - 标签 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 11 Oct 2024 00:16:14 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/tags/git/" rel="self" type="application/rss+xml" /><item>
    <title>在 Neovim 里面使用 vim-fugitive 的工作流</title>
    <link>https://martinlwx.github.io/zh-cn/my-workflow-of-using-vim-fugitive-in-neovim/</link>
    <pubDate>Fri, 11 Oct 2024 00:16:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/my-workflow-of-using-vim-fugitive-in-neovim/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark"></a>引言</h2><p>最近在使用 Git + Neovim 的时候，发现我的工作流还是有一些不那么顺畅的地方。我习惯性<em>退出 Neovim</em>，然后在命令行写 Git 相关的命令，并且在提交代码变更前我习惯用 <a href="https://github.com/dandavison/delta" target="_blank" rel="noopener noreferrer">delta</a> 查看 diff 信息。为了减少要打的字符，我还开启了 <a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener noreferrer">Oh My Zsh</a> 的 <code>git</code> 插件，这样我就可以用一堆缩写了，比如 <code>ga = git add</code>、<code>gcmsg = git commit -m</code></p>]]></description>
</item><item>
    <title>Git Bundle 指南</title>
    <link>https://martinlwx.github.io/zh-cn/git-bundle-tutorial/</link>
    <pubDate>Fri, 16 Jun 2023 23:48:28 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/git-bundle-tutorial/</guid>
    <description><![CDATA[<h2 id="git-bundle-是什么" class="headerLink">
    <a href="#git-bundle-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>git bundle 是什么</h2><p><code>git bundle</code> 是一个比较少看到的 git 命令，<strong>它的作用是把一个 git 仓库打包📦成一个文件，然后别人可以通过这个文件还原出本来的 git 仓库，而且 git bundle 还支持增量更新功能</strong>。在知道 <code>git bundle</code> 命令之前，我有时候打包一个 git 仓库一般就直接 <code>tar czf some_git_repo</code>。前阵子偶然发现了 <code>git bundle</code> 发现还挺实用的🍻</p>]]></description>
</item><item>
    <title>Git LFS 使用指南</title>
    <link>https://martinlwx.github.io/zh-cn/gitlfs/</link>
    <pubDate>Mon, 06 Dec 2021 10:14:54 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/gitlfs/</guid>
    <description><![CDATA[<h2 id="什么时候需要-git-lfs" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e9%9c%80%e8%a6%81-git-lfs" class="header-mark"></a>什么时候需要 Git LFS</h2><p>如果你在命令行用 <code>git push</code> <em>添加或更新</em> $&gt;$ 50MB 的文件，你会收到一个 warning，不过你仍然可以正常 <code>push</code>。但如果 $&gt;$ 100MB 的时候就无法 <code>push</code> 了。如果你是在浏览器要上传文件的话，这个限制更为严重，<em>不能超过</em> 25MB，这是 GitHub 对仓库的限制。Git LFS 就是用于解决这个问题<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>]]></description>
</item></channel>
</rss>
