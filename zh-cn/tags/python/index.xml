<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - 标签 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/tags/python/</link>
        <description>Python - 标签 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sun, 30 Mar 2025 21:36:18 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Python 的 2 个进程池相关 API</title>
    <link>https://martinlwx.github.io/zh-cn/data-parallel-with-two-different-api/</link>
    <pubDate>Sun, 30 Mar 2025 21:36:18 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/data-parallel-with-two-different-api/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>作为一名算法工程师，在我的工作中经常都会写各种 Python 脚本来处理大量数据，做数据清洗、信息提取等。通常情况下，这些数据的处理并不涉及竞争条件（Race Condition），而是简单的数据并行（Data Parallel），属于 <em>CPU 密集型任务</em>。通常情况下，这样的任务可以被抽象为 <code>map(fn, data)</code> 的模式</p>]]></description>
</item><item>
    <title>什么是 Python 装饰器</title>
    <link>https://martinlwx.github.io/zh-cn/understanding-python-decorator/</link>
    <pubDate>Mon, 20 Jan 2025 21:40:43 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/understanding-python-decorator/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>如果你能够认识到<em>函数是一等公民（First-class）的话</em>，那么你理解 Python 装饰器应该没有什么困难。函数是一等公民（First-class）就意味着：函数也是值，和其他基本类型（<code>int, str, float, etc</code>）等一样，<em>都可以作为函数的入参和返回值</em></p>]]></description>
</item><item>
    <title>@dataclass 简明教程（Python3.7）</title>
    <link>https://martinlwx.github.io/zh-cn/learn-to-use-dataclass-in-python/</link>
    <pubDate>Sat, 17 Aug 2024 12:30:43 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/learn-to-use-dataclass-in-python/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>Python 的 tuple 很好用，它可以让我们快速地将<em>不同类型</em>的值<em>封装</em>在一起，作为一个整体进行管理，自带的排序规则也十分直观，简单易用。但实际用下来我发现，一旦 tuple 的字段<em>比较多</em>，我就<em>被迫</em>要自己写一下注释注明一下<em>不同位置</em>的字段的具体含义是啥，比如</p>]]></description>
</item><item>
    <title>Python 的类型提示：是什么以及为什么</title>
    <link>https://martinlwx.github.io/zh-cn/type-hints-in-python/</link>
    <pubDate>Fri, 13 Jan 2023 16:18:09 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/type-hints-in-python/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>Info<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p><strong>更新</strong>：</p>]]></description>
</item><item>
    <title>Python 3.5 的解包操作符</title>
    <link>https://martinlwx.github.io/zh-cn/unpacking-in-python/</link>
    <pubDate>Mon, 05 Dec 2022 23:16:33 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/unpacking-in-python/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>今天我想要聊聊 Python 中用于解包（Unpacking）的两个操作符号——<code>*</code> 和 <code>**</code></p>
<h2 id="基本用法" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95" class="header-mark" aria-label="Header mark for '基本用法'"></a>基本用法</h2><p><code>*</code> 最为常见的用法是用来表示乘法。但我们也可以将 <code>*</code> 用于任意一个可迭代对象（iterable object）<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>上，表示我们想要提取里面所有的值</p>]]></description>
</item><item>
    <title>Python3.6 的 f-strings</title>
    <link>https://martinlwx.github.io/zh-cn/f-strings-in-python/</link>
    <pubDate>Wed, 16 Nov 2022 22:15:00 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/f-strings-in-python/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>信息<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p><strong>更新</strong>：</p>]]></description>
</item><item>
    <title>海象表达式简明教程（Python 3.8）</title>
    <link>https://martinlwx.github.io/zh-cn/walrus-operator-in-python/</link>
    <pubDate>Sat, 29 Oct 2022 23:35:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/walrus-operator-in-python/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>今天要说的是在 Python3.8 中引入的新特性：海象运算符（Walrus operator），这是一个备受争议的特性，但它最后还是通过并发布了🤔</p>]]></description>
</item><item>
    <title>模式匹配简明教程（Python 3.10）</title>
    <link>https://martinlwx.github.io/zh-cn/pattern-matching-in-python/</link>
    <pubDate>Sun, 16 Oct 2022 11:23:17 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/pattern-matching-in-python/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>今天我想要谈一下 Python 3.10 提出的新特性<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>——模式匹配🎉</p>
<p>学习过 C 语言的人想必对下面的 <code>switch</code> 语句不陌生，</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">c</p>]]></description>
</item><item>
    <title>怎么 debug Python 代码</title>
    <link>https://martinlwx.github.io/zh-cn/how-to-debug-in-python/</link>
    <pubDate>Tue, 28 Dec 2021 11:19:00 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/how-to-debug-in-python/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><blockquote>
  <p>PS. 有兴趣的可以查看我翻译的一个项目 - <a href="https://github.com/MartinLwx/pdb-tutorial" target="_blank" rel="noopener noreferrer">pdb 教程</a> 🙌</p>

</blockquote><p>很长一段时间内我写代码都是用最简单的 debug 方法, 手动在程序里面插入 <code>print</code> 代码来看具体的变量的值, 然后自己推断程序到底是在哪里出问题。根据 <code>print</code> 的结果可能还要到别的地方重复这个步骤。debug 完之后还得去把这些 <code>print</code> 语句注释掉，即<strong>我是一名 print debugger</strong> &#x1f622;</p>]]></description>
</item></channel>
</rss>
