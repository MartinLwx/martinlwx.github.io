<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - 分类 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/categories/algorithm/</link>
        <description>Algorithm - 分类 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sat, 15 Mar 2025 19:11:43 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/categories/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>前缀和数组: 快速计算数组区间和</title>
    <link>https://martinlwx.github.io/zh-cn/ds-prefixsum-array/</link>
    <pubDate>Sat, 15 Mar 2025 19:11:43 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/ds-prefixsum-array/</guid>
    <description><![CDATA[<h2 id="motivations" class="headerLink">
    <a href="#motivations" class="header-mark" aria-label="Header mark for 'Motivations'"></a>Motivations</h2><p>有这么一类问题——给定一个数组 $arr$ 和 $Q$ 个查询，每一个查询的格式是 $query(l, r)$，意思是计算区间和 $arr[l] + arr[l + 1] + &hellip; + arr[r]$</p>]]></description>
</item><item>
    <title>下一个排列问题</title>
    <link>https://martinlwx.github.io/zh-cn/the-next-lexicographical-permutation-problem/</link>
    <pubDate>Wed, 06 Sep 2023 23:13:52 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/the-next-lexicographical-permutation-problem/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>有时候我们会想要生成一个序列的「下一个排列」或者是「上一个排列」，你会怎么做呢？如果你对 C++ 很熟悉的话，不难想到可以用 <code>next_permutation</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 和 <code>prev_permutation</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。但是 Python 并没有提供类似的 API。因此今天要探讨的就是如何用 Python 实现这 2 个 API，又因为「上一个排列」和「下一个排列」的方法其实大同小异，因此让我们聚焦其中的「下一个排列」问题</p>]]></description>
</item><item>
    <title>用 SRTBOT 框架分析动态规划问题</title>
    <link>https://martinlwx.github.io/zh-cn/solving-dynamic-programming-problems-using-srtbot/</link>
    <pubDate>Sun, 09 Apr 2023 12:30:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/solving-dynamic-programming-problems-using-srtbot/</guid>
    <description><![CDATA[<p><strong>Changelog</strong>:</p>
<ul>
<li><a href="#relate-subproblems" rel="">更新依赖图</a> @2023.04.13</li>
</ul>
<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><p>在做算法题的时候，让我头疼的经常是动态规划问题，它属于那种自己琢磨半天想不出来，但是看了答案之后会恍然大悟，下次再做的话很有可能又忘记了的一类问题。我也曾经看了很多人的题解，试图消化、吸收、应用他们的思路，但我<strong>一直</strong>找不到一个归纳得特别好的框架，似乎每个人都有自己解决动态规划的思路，将他们的思路应用在没有见过的动态规划问题的时候我总是遇到困难，而他们的方法轮<em>似乎</em>也无法让我处理所有的动态规划问题。这种寻寻觅觅对动态规划似懂非懂的状态，终于在我看完 <a href="https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/" target="_blank" rel="noopener noreferrer">MIT6.006</a> 的课程之后发生了改变，课上老师提出了解决动态规划问题的 6 个步骤——被称为 <strong>SRTBOT 框架</strong>，我发现它是<strong>如此地好用</strong>，因此我决定写下这篇博客来与大家分享🙌</p>]]></description>
</item><item>
    <title>摩尔投票法</title>
    <link>https://martinlwx.github.io/zh-cn/boyer-moore-majority-voting-algorithm-explained/</link>
    <pubDate>Thu, 24 Mar 2022 18:15:19 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/boyer-moore-majority-voting-algorithm-explained/</guid>
    <description><![CDATA[<h2 id="引言" class="headerLink">
    <a href="#%e5%bc%95%e8%a8%80" class="header-mark" aria-label="Header mark for '引言'"></a>引言</h2><hr>
<p>今天又做到了 <a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener noreferrer">Leetcode 169. 多数元素</a> 这一道题. 我依稀记得最优的解法叫做什么摩尔投票法. 但是我对它的印象竟然只有这个名字本身了 Orz. 对于这个算法本身倒是忘得一干二净. 于是我打算系统性地学习一下这个算法的原理, 并将它总结出来写成这篇博客. 不知道在哪里看到的一句话 :</p>]]></description>
</item></channel>
</rss>
